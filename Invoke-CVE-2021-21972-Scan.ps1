<# 
.SYNOPSIS

This script will scan the specified target hosts and attempt to detect those that are vulnerable to VMware vCenter CVE-2021-21972.

.DESCRIPTION

This script will scan the specified target hosts and attempt to detect those that are vulnerable to VMware vCenter CVE-2021-21972.

The script will execute in the following order:
- Create a log file, default log name is Invoke-CVE-2021-21972-Scan-output.txt
- Scan each target host by performing the following:
    - Check the root domain for vSphere/vCenter strings
        - If not found, check the /ui/ (HTML5 UI) directory for vSphere/vCenter strings
            - If not found, no vulnerability scan is performed unless -f/-force parameter is specified
    - If strings are found, make a GET request to /ui/vropspluginui/rest/services/uploadova looking for the
      following responses:
        - 405 - Server is likely vulnerable
        - 401 - Server is likely patched
        - Other - Server is not vulnerable

.EXAMPLE

Basic usage:
C:\PS> PowerShell.exe -ExecutionPolicy Bypass .\Invoke-CVE-2021-21972-Scan.ps1 -targetHosts "vcenter.local","vcenter.net"

All options with force scan:
C:\PS> PowerShell.exe -ExecutionPolicy Bypass .\Invoke-CVE-2021-21972-Scan.ps1 -targetHosts "vcenter.local","vcenter.net" -outputFile "output.txt" -force

All options with force scan (shorthand version):
C:\PS> PowerShell.exe -ExecutionPolicy Bypass .\Invoke-CVE-2021-21972-Scan.ps1 -t "vcenter.local","vcenter.net" -o "output.txt" -f

#>

[CmdletBinding()] Param(
    [Parameter(Mandatory = $true)]
    [Alias("t")]
    [String[]]  
    $targetHosts,

    [Parameter(Mandatory = $false)]
    [Alias("o")]
    [String]
    $outputFile = "Invoke-CVE-2021-21972-Scan-output.txt",

    [Parameter(Mandatory=$false)]
    [Alias("f")]
    [Switch]
    $force
)

Function Invoke-CustomWebRequest($url) {
    # Ignore SSL Cert Errors - vCenter certs are self-signed by default
	[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} 
    # Initialize WebClient
	$wC = New-Object net.webclient
    $wC.Headers['User-Agent'] = 'Mozilla/5.0'
    $wC.DownloadString($url)
}

function Invoke-vulnScan ($targetHost) {
        # Construct vulnerable url for the target
        $vulnUrl = "https://" + $targetHost + "/ui/vropspluginui/rest/services/uploadova"
        try {
            # Make the request
            $request = Invoke-CustomWebRequest $vulnUrl
        } catch [System.Net.WebException] {
            # Catch the status code, anything other than 200 causes an exception
            $status = $_.Exception.Message
        }
        if ($status -match "405") {
            Write-Host " |  $targetHost appears to be vulnerable" -ForegroundColor Red
            Write-Verbose "Server status mesasage: $status"
        } elseif ($status -match "401") {
            Write-Host " |  $targetHost appears to be patched" -ForegroundColor Green
            Write-Verbose "Server status mesasage: $status"
        } else {
            Write-Host " |  $targetHost does not appear to be vulnerable" -ForegroundColor Green
            Write-Verbose "Server status mesasage: $status"
        }
}

Function Invoke-hostScan($targetHost){
    Write-Host "[+] Scanning: $targetHost"
    # Attempt to detect VMware vSphere/vCenter Server
    try {
        # Splash page
        $detectVmwareRule1 = "https://" + $targetHost + "/"
        $detectVmwareRule1Request = Invoke-CustomWebRequest $detectVmwareRule1
        if ($detectVmwareRule1Request -match "vsphere") { 
            " |  vSphere/vCenter strings detected"
            Invoke-VulnScan $targetHost
        } else {
            # HTML5 UI Login    
            $detectVmwareRule2 =  "https://" + $targetHost + "/ui/"
            $detectVmwareRule2Request = Invoke-CustomWebRequest $detectVmwareRule2
            if ($detectVmwareRule2Request -match "vsphere") {
                " |  vSphere/vCenter strings detected" 
                Invoke-VulnScan $targetHost               
            } else {
                " |  $targetHost does not appear to be a VMware server"
                if ($force -match $True) {
                    " |  Force applied, scanning host anyway"
                    Invoke-VulnScan $targetHost 
                }
            }
        }
    } catch {
        " |  There was an error connecting to $targetHost"
    }
    ""
}

# Start logging
Start-Transcript -Path $outputFile
""
# Time stamp
$begin = Get-Date -format "MMM-dd-yyyy HH:mm"
Write-Host "[*] Start time: $begin"
""
# Loop through the targetHosts array
foreach ($targetHost in $targetHosts) {
    Invoke-hostScan $targetHost
}
""
# Time stamp
$end = Get-Date -format "MMM-dd-yyyy HH:mm"
Write-Host "[*] Finish time: $begin"
""
#Stop logging
Stop-Transcript